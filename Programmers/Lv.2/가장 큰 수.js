// // 2022.12.22(Thurs)
// 가장 큰 수(정렬).js

function solution(numbers) {
  numbers = numbers.map((el) => String(el)); // 숫자인 원소 값들을 문자열 원소 값들로 바꾸기
  numbers.sort((a, b) => b + a - (a + b)); // 정렬

  const result = numbers.join("");

  return result == 0 ? "0" : result; // 문자열로 합쳐주기
  // [0, 0, 0, 0] => result 값이 0000이 반환되는데 이를 0으로 출력하기 위해서는 따로 조건을 걸어주어야 한다.
  // == 즉, 느슨한 비교를 통해 0000과 0이 같음을 이용하여 0이면 '0'을 출력하도록 한다.
  // === 엄격한 비교를 통해 0000과 0를 비교하면 같지 않다고 판단하여 맞지 않는 조건이 된닷
}
// sort 내에서
// 반환 값 < 0 => a, b 순
// 반환 값 = 0 => 순서 변경 X
// 반환 값 > 0 => b, a 순
// 위의 조건을 활용하여 어느 경우에 순서를 바꾸지는 생각해보면 된다.

// 예를 들어 a, b가 각 '6', '10'일 때,
// a+b = 610, b+a = 106
// 1. (a+b) - (b+a) > 0 (610-106) => 10, 6 순서가 되어야 함
// 2. (b+a) - (a+b) < 0 (106-610) => 6, 10 순서가 되어야 함
// 가장 큰 수를 만들려면 6, 10 순서가 되어야 하므로 2번째 방법으로 정렬을 해야 한다.
// 즉, sort((a, b) => (b+a) - (a+b))로 정렬해주기!

// 정렬 후 배열 내의 원소들을 이어붙이면 정답이 나올 것 같다는 접근까지 했는데 어떻게 정렬을 해야할지 생각이 나지 않아서 다른 사람 풀이를 이해해보기로,,
// 자주 사용했던 sort((a, b) => b - a) 와 같은 형식은 오름차순, 내림차순 정렬의 원리를 모른 채 사용하고 있었는데
// 원리를 모르니까 첨엔 이해가 잘 가지 않았다. 반환 값이 양수인지, 음수인지에 따른 정렬 공식?을 알고 나니까 이해가 겨우 되었다...

console.log(solution([6, 10, 2])); // "6210"
console.log(solution([3, 30, 34, 5, 9])); // "9534330"
console.log(solution([0, 0, 0, 0])); // "0"
